.TH "Senergy::ByteBuffer" 3 "Tue Feb 25 2014" "Version 1.0" "Senergy" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Senergy::ByteBuffer \- 
.PP
A dynamiclly sized buffer for binary data\&. Resizes the underlying buffer when new data is written\&. Makes it easier to write to buffers that already contain data\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <bytebuffer\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBByteBuffer\fP ()"
.br
.RI "\fIInitializes a new instance of the \fBByteBuffer\fP class\&. The intial buffer size is 0 bytes\&. \fP"
.ti -1c
.RI "\fBByteBuffer\fP (unsigned int size)"
.br
.RI "\fIInitializes a new instance of the \fBByteBuffer\fP class with the specified size\&. After initialization, the buffer is enlarged to the specified size\&. \fP"
.ti -1c
.RI "\fB~ByteBuffer\fP ()"
.br
.RI "\fIThe \fBByteBuffer\fP's destructor\&. Free's the underlying buffer, and cleans up used resources\&. \fP"
.ti -1c
.RI "bool \fBIsEmpty\fP ()"
.br
.RI "\fIChecks if the buffer is empty and returns true when the buffer is empty and false when the buffer is not empty\&. \fP"
.ti -1c
.RI "int \fBSize\fP ()"
.br
.RI "\fIGets the size of the buffer\&. This is not the same as the data size\&. \fP"
.ti -1c
.RI "int \fBGetRemainingSize\fP ()"
.br
.RI "\fIGets the amount of bytes that can be read until the end of the buffer is reached\&. \fP"
.ti -1c
.RI "int \fBGetPosition\fP ()"
.br
.RI "\fIGets the current position within the byte buffer\&. The position is the offset within the buffer that writing/reading starts at\&. \fP"
.ti -1c
.RI "bool \fBSetPosition\fP (int position)"
.br
.RI "\fISets the current position within the byte buffer\&. The position is the offset within the buffer that writing/reading starts at\&. \fP"
.ti -1c
.RI "bool \fBIncreasePosition\fP (int amount=1)"
.br
.RI "\fIIncreases the position by the specified amount of bytes\&. \fP"
.ti -1c
.RI "bool \fBDecreasePosition\fP (int amount=1)"
.br
.RI "\fIDecreases the position by the specified amount of bytes\&. \fP"
.ti -1c
.RI "bool \fBSetPosition\fP (unsigned int position)"
.br
.RI "\fISets the current position within the byte buffer\&. The position is the offset within the buffer that writing/reading starts at\&. \fP"
.ti -1c
.RI "void \fBReserve\fP (unsigned int size)"
.br
.RI "\fIAssures that the buffer is of the specified size and enlarges the buffer when the current size of the buffer is below the specified, desired size\&. \fP"
.ti -1c
.RI "void \fBReserve\fP (int size)"
.br
.RI "\fIAssures that the buffer is of the specified size and enlarges the buffer when the current size of the buffer is below the specified, desired size\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (char *data, unsigned int size)"
.br
.RI "\fIWrites the specified data of the specified size to the buffer\&. The buffer is automaticlly resized when the specified data does not fit into the current buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (void *data, unsigned int size)"
.br
.RI "\fIWrites the specified data of the specified size to the buffer\&. The buffer is automaticlly resized when the specified data does not fit into the current buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (char *data, int size)"
.br
.RI "\fIWrites the specified data of the specified size to the buffer\&. The buffer is automaticlly resized when the specified data does not fit into the current buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (void *data, int size)"
.br
.RI "\fIWrites the specified data of the specified size to the buffer\&. The buffer is automaticlly resized when the specified data does not fit into the current buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (const std::string &data)"
.br
.RI "\fIWrites the specified string to the buffer\&. The buffer is automaticlly resized when the specified string does not fit into the buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (int value)"
.br
.RI "\fIWrites the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (unsigned int value)"
.br
.RI "\fIWrites the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (char value)"
.br
.RI "\fIWrites the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (unsigned char value)"
.br
.RI "\fIWrites the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (short value)"
.br
.RI "\fIWrites the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. \fP"
.ti -1c
.RI "void \fBWrite\fP (unsigned short value)"
.br
.RI "\fIWrites the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. \fP"
.ti -1c
.RI "void \fBWriteNop\fP ()"
.br
.RI "\fIWrites a null byte (0) to the byte buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. \fP"
.ti -1c
.RI "bool \fBRead\fP (char *buffer, int size)"
.br
.RI "\fIReads the specified amount of bytes from the buffer and copies it into the specified buffer\&. \fP"
.ti -1c
.RI "bool \fBRead\fP (char *buffer, unsigned int size)"
.br
.RI "\fIReads the specified amount of bytes from the buffer and copies it into the specified buffer\&. \fP"
.ti -1c
.RI "bool \fBReadRemaining\fP (char *buffer, int max_size)"
.br
.RI "\fIReads all remaining bytes from the buffer\&. \fP"
.ti -1c
.RI "bool \fBReadRemaining\fP (char *buffer, unsigned int max_size)"
.br
.RI "\fIReads all remaining bytes from the buffer\&. \fP"
.ti -1c
.RI "int \fBReadInt\fP ()"
.br
.RI "\fIReads an integer from the buffer\&. \fP"
.ti -1c
.RI "unsigned int \fBReadUnsignedInt\fP ()"
.br
.RI "\fIReads an unsigned integer from the buffer\&. \fP"
.ti -1c
.RI "char \fBReadChar\fP ()"
.br
.RI "\fIReads a char from the buffer\&. \fP"
.ti -1c
.RI "unsigned char \fBReadUnsignedChar\fP ()"
.br
.RI "\fIReads an unsigned char from the buffer\&. \fP"
.ti -1c
.RI "short \fBReadShort\fP ()"
.br
.RI "\fIReads a short from the buffer\&. \fP"
.ti -1c
.RI "unsigned short \fBReadUnsignedShort\fP ()"
.br
.RI "\fIReads an unsigned short from the buffer\&. \fP"
.ti -1c
.RI "std::string \fBReadString\fP (unsigned int max_length=0)"
.br
.RI "\fIAttempts to read a string for the buffer until a string termination character, or the end of the buffer is encountered\&. \fP"
.ti -1c
.RI "std::string \fBReadAll\fP ()"
.br
.RI "\fIReads the contents of the buffer from start to end and returns the contents as a string\&. \fP"
.ti -1c
.RI "void \fBDumpHexadecimal\fP ()"
.br
.RI "\fIDump everything from the current position to the standard output, where each byte in the buffer is dumped in it's hexadecimal representation\&. Each byte will be separated by a space and after 35 bytes, a new line is created\&. \fP"
.ti -1c
.RI "void \fBDumpHexadecimal\fP (int start, int amount)"
.br
.RI "\fIDump everything from the current position to the standard output, where each byte in the buffer is dumped in it's hexadecimal representation\&. Each byte will be separated by a space and after 35 bytes, a new line is created\&. \fP"
.ti -1c
.RI "bool \fBCopyTo\fP (\fBByteBuffer\fP &buffer, int amount)"
.br
.RI "\fICopies the specified amount of bytes from the current position into the specified buffer\&. \fP"
.ti -1c
.RI "bool \fBHasReachedEnd\fP ()"
.br
.RI "\fIChecks if the buffer's position is currently at the end of the buffer\&. \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBSocket\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A dynamiclly sized buffer for binary data\&. Resizes the underlying buffer when new data is written\&. Makes it easier to write to buffers that already contain data\&. 


.PP
\fBAuthor:\fP
.RS 4
Swen Kooij (Photonios) 
.RE
.PP

.PP
Definition at line 40 of file bytebuffer\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Senergy::ByteBuffer::ByteBuffer ()"

.PP
Initializes a new instance of the \fBByteBuffer\fP class\&. The intial buffer size is 0 bytes\&. 
.PP
Definition at line 27 of file bytebuffer\&.cpp\&.
.SS "Senergy::ByteBuffer::ByteBuffer (unsigned intsize)"

.PP
Initializes a new instance of the \fBByteBuffer\fP class with the specified size\&. After initialization, the buffer is enlarged to the specified size\&. 
.PP
Definition at line 35 of file bytebuffer\&.cpp\&.
.SS "Senergy::ByteBuffer::~ByteBuffer ()"

.PP
The \fBByteBuffer\fP's destructor\&. Free's the underlying buffer, and cleans up used resources\&. 
.PP
Definition at line 43 of file bytebuffer\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "bool Senergy::ByteBuffer::CopyTo (\fBByteBuffer\fP &buffer, intamount)"

.PP
Copies the specified amount of bytes from the current position into the specified buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP The buffer to copy the bytes to\&. 
.br
\fIamount\fP The amount of bytes to copy to the specified buffer\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether the copy operation was a success, false is returned when the copy failed and true is returned when the copy was a success\&. Failure is usually caused by specifiying an amount that is more then the remaining size\&. 
.RE
.PP

.PP
Definition at line 332 of file bytebuffer\&.cpp\&.
.SS "bool Senergy::ByteBuffer::DecreasePosition (intamount = \fC1\fP)"

.PP
Decreases the position by the specified amount of bytes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIamount\fP The amount of bytes to decrease the position with, by default this is 1\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether setting the position to the requested offset succeseeded\&. True is returned when the operation succeseeded and false is returned when the operation failed\&. 
.RE
.PP

.PP
Definition at line 92 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::DumpHexadecimal ()"

.PP
Dump everything from the current position to the standard output, where each byte in the buffer is dumped in it's hexadecimal representation\&. Each byte will be separated by a space and after 35 bytes, a new line is created\&. 
.PP
Definition at line 275 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::DumpHexadecimal (intstart, intamount)"

.PP
Dump everything from the current position to the standard output, where each byte in the buffer is dumped in it's hexadecimal representation\&. Each byte will be separated by a space and after 35 bytes, a new line is created\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstart\fP The offset/position at which we should start dumping 
.br
\fIamount\fP The amount of bytes to display from the specified offset/position\&. 
.RE
.PP

.PP
Definition at line 301 of file bytebuffer\&.cpp\&.
.SS "int Senergy::ByteBuffer::GetPosition ()"

.PP
Gets the current position within the byte buffer\&. The position is the offset within the buffer that writing/reading starts at\&. 
.PP
\fBReturns:\fP
.RS 4
The position within the byte buffer\&. 
.RE
.PP

.PP
Definition at line 63 of file bytebuffer\&.cpp\&.
.SS "int Senergy::ByteBuffer::GetRemainingSize ()"

.PP
Gets the amount of bytes that can be read until the end of the buffer is reached\&. 
.PP
\fBReturns:\fP
.RS 4
The amount of bytes that can be read until the end of the buffer is reached\&. 
.RE
.PP

.PP
Definition at line 68 of file bytebuffer\&.cpp\&.
.SS "bool Senergy::ByteBuffer::HasReachedEnd ()"

.PP
Checks if the buffer's position is currently at the end of the buffer\&. 
.PP
\fBReturns:\fP
.RS 4
True when the end of the buffer was reached and false when it has not reached the end of the buffer\&. 
.RE
.PP

.PP
Definition at line 343 of file bytebuffer\&.cpp\&.
.SS "bool Senergy::ByteBuffer::IncreasePosition (intamount = \fC1\fP)"

.PP
Increases the position by the specified amount of bytes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIamount\fP The amount of bytes to increase the position with, by default this is 1\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether setting the position to the requested offset succeseeded\&. True is returned when the operation succeseeded and false is returned when the operation failed\&. 
.RE
.PP

.PP
Definition at line 87 of file bytebuffer\&.cpp\&.
.SS "bool Senergy::ByteBuffer::IsEmpty ()"

.PP
Checks if the buffer is empty and returns true when the buffer is empty and false when the buffer is not empty\&. 
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether the buffer is empty\&. True is returned when the buffer is empty and false when it is not\&. 
.RE
.PP

.PP
Definition at line 53 of file bytebuffer\&.cpp\&.
.SS "bool Senergy::ByteBuffer::Read (char *buffer, intsize)"

.PP
Reads the specified amount of bytes from the buffer and copies it into the specified buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP The buffer to write to\&. 
.br
\fIsize\fP The amount of bytes to read from the buffer\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether reading succeseeded\&. True is returned when reading succeseeded and false when reading failed\&. 
.RE
.PP

.PP
Definition at line 188 of file bytebuffer\&.cpp\&.
.SS "bool Senergy::ByteBuffer::Read (char *buffer, unsigned intsize)"

.PP
Reads the specified amount of bytes from the buffer and copies it into the specified buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP The buffer to write to\&. 
.br
\fIsize\fP The amount of bytes to read from the buffer\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether reading succeseeded\&. True is returned when reading succeseeded and false when reading failed\&. 
.RE
.PP

.PP
Definition at line 203 of file bytebuffer\&.cpp\&.
.SS "std::string Senergy::ByteBuffer::ReadAll ()"

.PP
Reads the contents of the buffer from start to end and returns the contents as a string\&. 
.PP
\fBNote:\fP
.RS 4
This does not affect the current position\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The contents of the buffer as a string\&. 
.RE
.PP

.PP
Definition at line 254 of file bytebuffer\&.cpp\&.
.SS "char Senergy::ByteBuffer::ReadChar ()"

.PP
Reads a char from the buffer\&. 
.PP
\fBReturns:\fP
.RS 4
The char that was read from the buffer\&. -1 is returned when reading failed\&. 
.RE
.PP

.PP
Definition at line 218 of file bytebuffer\&.cpp\&.
.SS "int Senergy::ByteBuffer::ReadInt ()"

.PP
Reads an integer from the buffer\&. 
.PP
\fBReturns:\fP
.RS 4
The integer that was read from the buffer\&. -1 is returned when reading failed\&. 
.RE
.PP

.PP
Definition at line 208 of file bytebuffer\&.cpp\&.
.SS "bool Senergy::ByteBuffer::ReadRemaining (char *buffer, intmax_size)"

.PP
Reads all remaining bytes from the buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP The buffer to write the acquired data to, make sure the buffer is at least the size of of the specified maximum size\&. 
.br
\fImax_size\fP The maximum amount of bytes to copy into the specified buffer, the size of the specified buffer\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether writing the remainging bytes to the specified buffer was a success\&. 
.RE
.PP

.SS "bool Senergy::ByteBuffer::ReadRemaining (char *buffer, unsigned intmax_size)"

.PP
Reads all remaining bytes from the buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP The buffer to write the acquired data to, make sure the buffer is at least the size of of the specified maximum size\&. 
.br
\fImax_size\fP The maximum amount of bytes to copy into the specified buffer, the size of the specified buffer\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether writing the remainging bytes to the specified buffer was a success\&. 
.RE
.PP

.SS "short Senergy::ByteBuffer::ReadShort ()"

.PP
Reads a short from the buffer\&. 
.PP
\fBReturns:\fP
.RS 4
The short that was read from the buffer\&. -1 is returned when reading failed\&. 
.RE
.PP

.PP
Definition at line 228 of file bytebuffer\&.cpp\&.
.SS "std::string Senergy::ByteBuffer::ReadString (unsigned intmax_length = \fC0\fP)"

.PP
Attempts to read a string for the buffer until a string termination character, or the end of the buffer is encountered\&. 
.PP
\fBParameters:\fP
.RS 4
\fImax_length\fP Specifies the maximum length of the string being returned\&. Specifying zero disables this functionality\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The string that was read, if something went wrong, or the end of the buffer was reached, everything that was read so far will be returned\&. If the buffer is empty, or there are no more bytes left to read, an empty string will be returned\&. 
.RE
.PP

.PP
Definition at line 238 of file bytebuffer\&.cpp\&.
.SS "unsigned char Senergy::ByteBuffer::ReadUnsignedChar ()"

.PP
Reads an unsigned char from the buffer\&. 
.PP
\fBReturns:\fP
.RS 4
The unsigned char that was read from the buffer\&. 0 is returned when reading failed\&. 
.RE
.PP

.PP
Definition at line 223 of file bytebuffer\&.cpp\&.
.SS "unsigned int Senergy::ByteBuffer::ReadUnsignedInt ()"

.PP
Reads an unsigned integer from the buffer\&. 
.PP
\fBReturns:\fP
.RS 4
The unsigned integer that was read from the buffer\&. 0 is returned when reading failed\&. 
.RE
.PP

.PP
Definition at line 213 of file bytebuffer\&.cpp\&.
.SS "unsigned short Senergy::ByteBuffer::ReadUnsignedShort ()"

.PP
Reads an unsigned short from the buffer\&. 
.PP
\fBReturns:\fP
.RS 4
The unsigned short that was read from the buffer\&. 0 is returned when reading failed\&. 
.RE
.PP

.PP
Definition at line 233 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Reserve (unsigned intsize)"

.PP
Assures that the buffer is of the specified size and enlarges the buffer when the current size of the buffer is below the specified, desired size\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP The desired size of the buffer\&. 
.RE
.PP

.PP
Definition at line 97 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Reserve (intsize)"

.PP
Assures that the buffer is of the specified size and enlarges the buffer when the current size of the buffer is below the specified, desired size\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP The desired size of the buffer\&. 
.RE
.PP

.PP
Definition at line 108 of file bytebuffer\&.cpp\&.
.SS "bool Senergy::ByteBuffer::SetPosition (intposition)"

.PP
Sets the current position within the byte buffer\&. The position is the offset within the buffer that writing/reading starts at\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The offset to set the current position to\&. The new offset must be 0 and not exceed the size of the buffer\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether setting the position to the requested offset succeseeded\&. True is returned when the operation succeseeded and false is returned when the operation failed\&. 
.RE
.PP

.PP
Definition at line 73 of file bytebuffer\&.cpp\&.
.SS "bool Senergy::ByteBuffer::SetPosition (unsigned intposition)"

.PP
Sets the current position within the byte buffer\&. The position is the offset within the buffer that writing/reading starts at\&. 
.PP
\fBParameters:\fP
.RS 4
\fIposition\fP The offset to set the current position to\&. The new offset must be 0 and not exceed the size of the buffer\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether setting the position to the requested offset succeseeded\&. True is returned when the operation succeseeded and false is returned when the operation failed\&. 
.RE
.PP

.PP
Definition at line 82 of file bytebuffer\&.cpp\&.
.SS "int Senergy::ByteBuffer::Size ()"

.PP
Gets the size of the buffer\&. This is not the same as the data size\&. 
.PP
\fBReturns:\fP
.RS 4
The size of the buffer, in bytes\&. 
.RE
.PP

.PP
Definition at line 58 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (char *data, unsigned intsize)"

.PP
Writes the specified data of the specified size to the buffer\&. The buffer is automaticlly resized when the specified data does not fit into the current buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the specified size\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The data to write to the buffer\&. If the specified data is NULL, no data will be written\&. 
.br
\fIsize\fP The size of the data to write\&. 
.RE
.PP

.PP
Definition at line 116 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (void *data, unsigned intsize)"

.PP
Writes the specified data of the specified size to the buffer\&. The buffer is automaticlly resized when the specified data does not fit into the current buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the specified size\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The data to write to the buffer\&. If the specified data is NULL, no data will be written\&. 
.br
\fIsize\fP The size of the data to write\&. 
.RE
.PP

.PP
Definition at line 126 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (char *data, intsize)"

.PP
Writes the specified data of the specified size to the buffer\&. The buffer is automaticlly resized when the specified data does not fit into the current buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the specified size\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The data to write to the buffer\&. If the specified data is NULL, no data will be written\&. 
.br
\fIsize\fP The size of the data to write\&. 
.RE
.PP

.PP
Definition at line 121 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (void *data, intsize)"

.PP
Writes the specified data of the specified size to the buffer\&. The buffer is automaticlly resized when the specified data does not fit into the current buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the specified size\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The data to write to the buffer\&. If the specified data is NULL, no data will be written\&. 
.br
\fIsize\fP The size of the data to write\&. 
.RE
.PP

.PP
Definition at line 140 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (const std::string &data)"

.PP
Writes the specified string to the buffer\&. The buffer is automaticlly resized when the specified string does not fit into the buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the size of the specified string\&. 
.PP
Accounts for the string termination character (\\0)\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The string to write to the buffer\&. 
.RE
.PP

.PP
Definition at line 148 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (intvalue)"

.PP
Writes the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the size of the specified value\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The value to write to the buffer\&. 
.RE
.PP

.PP
Definition at line 153 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (unsigned intvalue)"

.PP
Writes the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the size of the specified value\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The value to write to the buffer\&. 
.RE
.PP

.PP
Definition at line 158 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (charvalue)"

.PP
Writes the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the size of the specified value\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The value to write to the buffer\&. 
.RE
.PP

.PP
Definition at line 163 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (unsigned charvalue)"

.PP
Writes the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the size of the specified value\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The value to write to the buffer\&. 
.RE
.PP

.PP
Definition at line 168 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (shortvalue)"

.PP
Writes the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the size of the specified value\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The value to write to the buffer\&. 
.RE
.PP

.PP
Definition at line 173 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::Write (unsigned shortvalue)"

.PP
Writes the specified value to the buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by the size of the specified value\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The value to write to the buffer\&. 
.RE
.PP

.PP
Definition at line 178 of file bytebuffer\&.cpp\&.
.SS "void Senergy::ByteBuffer::WriteNop ()"

.PP
Writes a null byte (0) to the byte buffer\&. The buffer is automaticlly resized when the specified value does not fit into the buffer\&. 
.PP
\fBNote:\fP
.RS 4
Increases the position by 1\&. 
.RE
.PP

.PP
Definition at line 183 of file bytebuffer\&.cpp\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBSocket\fP\fC [friend]\fP"

.PP
Definition at line 46 of file bytebuffer\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Senergy from the source code\&.
