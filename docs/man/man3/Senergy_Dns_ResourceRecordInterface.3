.TH "Senergy::Dns::ResourceRecordInterface" 3 "Tue Feb 25 2014" "Version 1.0" "Senergy" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Senergy::Dns::ResourceRecordInterface \- 
.PP
Defines an interface using pure virtuals for classes that wish to implement a specic resource record type\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <resource_record_interface\&.h>\fP
.PP
Inherited by \fBSenergy::Dns::IPV4Record\fP, \fBSenergy::Dns::NameServerRecord\fP, and \fBSenergy::Dns::UnknownRecord\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBResourceRecordInterface\fP (\fBResourceRecordBasePtr\fP base)"
.br
.RI "\fIInitializes a new instance of of the ResourceRecordInterfacePtr class with a reference to an instance of the \fBResourceRecordBase\fP class\&. \fP"
.ti -1c
.RI "virtual bool \fBSerialize\fP (\fBByteBuffer\fP &buffer)=0"
.br
.RI "\fISerializes this record into the specified buffer\&. This does not handle the serialization of the first (base) part of the resource record\&. Call SerializeBase for that\&. \fP"
.ti -1c
.RI "virtual bool \fBDeserialize\fP (\fBByteBuffer\fP &buffer)=0"
.br
.RI "\fIDeserializes the record from the specified buffer\&. This does not handle deserialization of the first (base) part of the resource record\&. Call DeserializeBase for that\&. \fP"
.ti -1c
.RI "virtual \fBResourceRecordInterfacePtr\fP \fBCreate\fP (\fBResourceRecordBasePtr\fP base)=0"
.br
.RI "\fICreates a new instance of this class, and returns it as a shared pointer to an instance of the \fBResourceRecordInterface\fP class\&. \fP"
.ti -1c
.RI "virtual \fBResourceRecordType\fP \fBGetType\fP ()=0"
.br
.RI "\fIGets the type of of this record (derived), wich is a value from the ResourceRecordType enumuration\&. \fP"
.ti -1c
.RI "virtual \fBResourceRecordClass\fP \fBGetClass\fP ()"
.br
.RI "\fIGets the class of this record\&. This will almost always be the same and does not have to be implemented by the derived class\&. \fP"
.ti -1c
.RI "\fBResourceRecordBasePtr\fP \fBGetBase\fP () const "
.br
.RI "\fIReturns the underlying base resource record for this record\&. \fP"
.ti -1c
.RI "virtual void \fBDump\fP ()"
.br
.RI "\fIDumps all fields to the standard output, with their values\&. In the following format: \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<class T > static \fBResourceRecordInterfacePtr\fP \fBCreateCast\fP (\fBResourceRecordBasePtr\fP base)"
.br
.RI "\fICreates a new instance of the specified type with the specified resource record base instance, and casts it to a shared ppinter to a \fBResourceRecordInterface\fP class (polymorhpism)\&. The specified type must inherit from \fBResourceRecordInterface\fP\&. \fP"
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef std::shared_ptr
.br
< \fBResourceRecordInterface\fP > \fBResourceRecordInterfacePtr\fP"
.br
.ti -1c
.RI "typedef \fBResourceRecordBase\fP \fBBase\fP"
.br
.RI "\fIMore logical way to allow access to the base class\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBSetResourceSize\fP (unsigned short resource_size)"
.br
.RI "\fISets the resource size in the base record\&. \fP"
.ti -1c
.RI "bool \fBSetResourceSize\fP (unsigned int resource_size)"
.br
.RI "\fISets the resource size in the base record\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBResourceRecordBasePtr\fP \fBm_base\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Defines an interface using pure virtuals for classes that wish to implement a specic resource record type\&. 


.PP
\fBAuthor:\fP
.RS 4
Swen Kooij (Photonios)\&. 
.RE
.PP

.PP
Definition at line 43 of file resource_record_interface\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef \fBResourceRecordBase\fP \fBSenergy::Dns::ResourceRecordInterface::Base\fP\fC [protected]\fP"

.PP
More logical way to allow access to the base class\&. 
.PP
Definition at line 166 of file resource_record_interface\&.h\&.
.SS "typedef std::shared_ptr<\fBResourceRecordInterface\fP> \fBSenergy::Dns::ResourceRecordInterface::ResourceRecordInterfacePtr\fP\fC [protected]\fP"

.PP
Definition at line 48 of file resource_record_interface\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Senergy::Dns::ResourceRecordInterface::ResourceRecordInterface (\fBResourceRecordBasePtr\fPbase)"

.PP
Initializes a new instance of of the ResourceRecordInterfacePtr class with a reference to an instance of the \fBResourceRecordBase\fP class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbase\fP A resource record can have multiple types, a class that implents this interface handles the serialization and deserialization of the type-specific part\&.
.RE
.PP
The first part of a resource record is always the same\&. This is why we need an instance of the base class here\&. 
.PP
Definition at line 29 of file dns_resource_record_interface\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual \fBResourceRecordInterfacePtr\fP Senergy::Dns::ResourceRecordInterface::Create (\fBResourceRecordBasePtr\fPbase)\fC [pure virtual]\fP"

.PP
Creates a new instance of this class, and returns it as a shared pointer to an instance of the \fBResourceRecordInterface\fP class\&. The derived class should create an instance of itself and return the polymorphic form (as it's base)\&.
.PP
\fBParameters:\fP
.RS 4
\fIbase\fP The \fBResourceRecordBase\fP class to pass to the constructor\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A shared pointer to an instance of the \fBResourceRecordInterface\fP class, which is just the polymorphic form of the derived class\&. 
.RE
.PP

.PP
Implemented in \fBSenergy::Dns::IPV4Record\fP, \fBSenergy::Dns::NameServerRecord\fP, and \fBSenergy::Dns::UnknownRecord\fP\&.
.SS "template<class T > static \fBResourceRecordInterfacePtr\fP Senergy::Dns::ResourceRecordInterface::CreateCast (\fBResourceRecordBasePtr\fPbase)\fC [inline]\fP, \fC [static]\fP"

.PP
Creates a new instance of the specified type with the specified resource record base instance, and casts it to a shared ppinter to a \fBResourceRecordInterface\fP class (polymorhpism)\&. The specified type must inherit from \fBResourceRecordInterface\fP\&. T The type to create and cast to \fBResourceRecordInterface\fP shared pointer\&.
.PP
\fBReturns:\fP
.RS 4
An instance of the specified type but, casted to an instance of the \fBResourceRecordInterface\fP class (shared pointer)\&. 
.RE
.PP

.PP
Definition at line 140 of file resource_record_interface\&.h\&.
.SS "virtual bool Senergy::Dns::ResourceRecordInterface::Deserialize (\fBByteBuffer\fP &buffer)\fC [pure virtual]\fP"

.PP
Deserializes the record from the specified buffer\&. This does not handle deserialization of the first (base) part of the resource record\&. Call DeserializeBase for that\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP The buffer to deserialize from\&. 
.RE
.PP

.PP
Implemented in \fBSenergy::Dns::IPV4Record\fP, \fBSenergy::Dns::NameServerRecord\fP, and \fBSenergy::Dns::UnknownRecord\fP\&.
.SS "void Senergy::Dns::ResourceRecordInterface::Dump ()\fC [virtual]\fP"

.PP
Dumps all fields to the standard output, with their values\&. In the following format: 
.PP
Reimplemented in \fBSenergy::Dns::IPV4Record\fP, and \fBSenergy::Dns::NameServerRecord\fP\&.
.PP
Definition at line 54 of file dns_resource_record_interface\&.cpp\&.
.SS "\fBResourceRecordBasePtr\fP Senergy::Dns::ResourceRecordInterface::GetBase () const"

.PP
Returns the underlying base resource record for this record\&. 
.PP
\fBReturns:\fP
.RS 4
An instance of the \fBResourceRecordBase\fP class, which represents the first part in this resource record\&. 
.RE
.PP

.PP
Definition at line 34 of file dns_resource_record_interface\&.cpp\&.
.SS "\fBResourceRecordClass\fP Senergy::Dns::ResourceRecordInterface::GetClass ()\fC [virtual]\fP"

.PP
Gets the class of this record\&. This will almost always be the same and does not have to be implemented by the derived class\&. 
.PP
\fBReturns:\fP
.RS 4
A value from the ResourceRecordClass enumuration which denotes the class of this record\&. 
.RE
.PP

.PP
Definition at line 39 of file dns_resource_record_interface\&.cpp\&.
.SS "virtual \fBResourceRecordType\fP Senergy::Dns::ResourceRecordInterface::GetType ()\fC [pure virtual]\fP"

.PP
Gets the type of of this record (derived), wich is a value from the ResourceRecordType enumuration\&. 
.PP
\fBReturns:\fP
.RS 4
A value from the ResourceRecordType enumuration which denotes the type of this record\&. 
.RE
.PP

.PP
Implemented in \fBSenergy::Dns::IPV4Record\fP, \fBSenergy::Dns::NameServerRecord\fP, and \fBSenergy::Dns::UnknownRecord\fP\&.
.SS "virtual bool Senergy::Dns::ResourceRecordInterface::Serialize (\fBByteBuffer\fP &buffer)\fC [pure virtual]\fP"

.PP
Serializes this record into the specified buffer\&. This does not handle the serialization of the first (base) part of the resource record\&. Call SerializeBase for that\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP The buffer to serialize to\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean indicating whether the serialization was successful\&. 
.RE
.PP

.PP
Implemented in \fBSenergy::Dns::IPV4Record\fP, \fBSenergy::Dns::NameServerRecord\fP, and \fBSenergy::Dns::UnknownRecord\fP\&.
.SS "void Senergy::Dns::ResourceRecordInterface::SetResourceSize (unsigned shortresource_size)\fC [protected]\fP"

.PP
Sets the resource size in the base record\&. 
.PP
\fBParameters:\fP
.RS 4
\fIresource_size\fP The size of the resource 
.RE
.PP

.PP
Definition at line 44 of file dns_resource_record_interface\&.cpp\&.
.SS "bool Senergy::Dns::ResourceRecordInterface::SetResourceSize (unsigned intresource_size)\fC [protected]\fP"

.PP
Sets the resource size in the base record\&. 
.PP
\fBParameters:\fP
.RS 4
\fIresource_size\fP The size of the resource 
.RE
.PP

.PP
Definition at line 49 of file dns_resource_record_interface\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBResourceRecordBasePtr\fP Senergy::Dns::ResourceRecordInterface::m_base\fC [protected]\fP"

.PP
Definition at line 170 of file resource_record_interface\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Senergy from the source code\&.
